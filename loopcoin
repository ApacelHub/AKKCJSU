while _G.loop do 
    wait()

    for i,v in pairs(game.workspace.Coins.Meshes:GetChildren()) do
        if v.Name == "Coin" then
            local coinPosition = v.Position

            -- Iterate through all excluded parts to check if the coin is within any of them
            local isWithinExcludedPart = false
            for _, excludedPart in ipairs(game:GetService("Workspace").Spawn:GetChildren()) do
                if excludedPart:IsA("Part") then
                    local partPosition = excludedPart.Position
                    local partSize = excludedPart.Size
                    local partBounds = partSize / 2
                    local minX = partPosition.X - partBounds.X
                    local maxX = partPosition.X + partBounds.X
                    local minY = partPosition.Y - partBounds.Y
                    local maxY = partPosition.Y + partBounds.Y
                    local minZ = partPosition.Z - partBounds.Z
                    local maxZ = partPosition.Z + partBounds.Z

                    -- Check if the coin is within the current excluded part
                    if coinPosition.X >= minX and coinPosition.X <= maxX and
                       coinPosition.Y >= minY and coinPosition.Y <= maxY and
                       coinPosition.Z >= minZ and coinPosition.Z <= maxZ then
                        isWithinExcludedPart = true
                        break  -- Exit the loop since we found the coin within one excluded part
                    end
                end
            end

            -- If the coin is not within any excluded part, apply the tween effect
            if not isWithinExcludedPart then
                local TweenService = game:GetService("TweenService")
                local Tw = TweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), 
                    {CFrame = v.CFrame}):Play()
                wait(1)
            end
        end
    end
end
